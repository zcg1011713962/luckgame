local robot = require "indiarummy.indiarummyrobot"
local utils = require "indiarummy.indiarummyutils"


table.copy = table.copy or function(t, nometa)
    local result = {}

    if not nometa then
        setmetatable(result, getmetatable(t))
    end

    for k, v in pairs(t) do
        if type(v) == "table" then
            result[k] = table.copy(v, nometa)
        else
            result[k] = v
        end
    end
    return result
end



table.contain = table.contain or function(t, val)
    for _, v in pairs(t) do
        if v == val then
            return true
        end
    end
    return false
end



table.shuffle = table.shuffle or function(t)
    for i = #t, 2, -1 do
        local j = math.random(i)
        t[i], t[j] = t[j], t[i]
    end
    return t
end


local formatCards = robot.formatCards

--测试纯顺子
local function test_pureseq()
    local testcases = {
        {cards = {0x12,0x13,0x14}, expect=true},
        {cards = {0x12,0x13,0x1E}, expect=true},
        {cards = {0x12,0x13,0x2E}, expect=false},
        {cards = {0x3B,0x3C,0x3D,0x3E}, expect=true},
    }
    for _, testcase in ipairs(testcases) do
        if utils.IsPureSequence(testcase.cards) ~= testcase.expect then
            print("pureseq error at case", _)
        end
    end
    print("all test pureseq passed")
end
--test_pureseq()

--测试普通顺子
local function test_seq()
    local testcases = {
        {cards = {0x12,0x39,0x14}, wild = 0x39, expect=true},
        {cards = {0x12,0x39,0x1E}, wild = 0x39, expect=true},
        {cards = {0x12,0x39,0x2E}, wild = 0x39, expect=false},
        {cards = {0x3B,0x29,0x3D,0x3E}, wild = 0x39, expect=true},
        {cards = {0x33,0x39,0x3E}, wild = 0x39, expect=true},
    }
    for _, testcase in ipairs(testcases) do
        if utils.IsSequence(testcase.cards, testcase.wild) ~= testcase.expect then
            print("seq error at case", _)
        end
    end
    print("all test seq passed")
end
--test_seq()

--测试报错
local function test_error()
    local Cards = {  --使用两副牌
        0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,   --方块
        0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,   --梅花
        0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,   --红桃
        0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,   --黑桃
        0x51,0x52,
        0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,
        0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,
        0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,
        0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,
        0x51,0x52
    }
    math.randomseed(tonumber(tostring(os.time()):reverse():sub(1, 7)))
    for i = 1, 10000 do
        local cards = table.shuffle(Cards)
        local handcards = {}
        for k=1,13 do
            table.insert(handcards, cards[k])
        end
        local wild = Cards[#Cards]
        local groups1 = robot.arrangeCards(handcards, wild)
        local groups2 = robot.confirmCards(handcards, wild)
        assert(#groups1<=6, "#groups1 > 6")
        assert(utils.CheckGroups(groups1, handcards), "#group1 error")
        assert(#groups2<=6, "#groups2 > 6")
        assert(utils.CheckGroups(groups2, handcards), "#group2 error")
    end
    print("all testcases are ok")
end

--test_error()


--测试理牌
local function test_arrange_card()
    local testcases = {
        {handcards = {0x12,0x13,0x14, 0x15,0x25,0x35, 0x22,0x23,0x35, 0x15,0x25,0x35, 0x34}, wild = 0x34},
        {handcards = {0x12,0x13,0x14, 0x15,0x25,0x35, 0x22,0x23,0x24, 0x15,0x25,0x35, 0x34}, wild = 0x34},
        {handcards = {0x12,0x13,0x14, 0x25,0x35,0x45, 0x27,0x28,0x29, 0x17,0x27,0x37, 0x34}, wild = 0x34},
        {handcards = {0x28,0x29,0x2A, 0x47,0x48,0x49, 0x1d,0x22,0x23, 0x34,0x36,0x37, 0x43}, wild = 0x1D},
        {handcards = {0x28,0x29,0x2A, 0x47,0x48,0x49, 0x1d,0x22,0x23, 0x14,0x36,0x37, 0x43}, wild = 0x1D},
        {handcards = {0x17,0x18,0x19, 0x26,0x27,0x28, 0x2A,0x44,0x45, 0x1A,0x22,0x24, 0x51}, wild = 0x3A},
        {handcards = {0x39,0x3a,0x3b, 0x2c,0x52,0x2e,0x25, 0x4c,0x51,0x4e,0x48, 0x13,0x1c}, wild = 0x45},
    }

    for _, testcase in ipairs(testcases) do
        table.shuffle(testcase.handcards)
        local groups, types = robot.arrangeCards(testcase.handcards, testcase.wild)
        print(table.concat(types, ","), "-->")
        for _, group in ipairs(groups) do
            print(formatCards(group))
        end
        --print("discard", robot.checkDiscardCard(testcase.handcards, testcase.wild))
        print("------------------------------------")
    end
end

test_arrange_card()

--测试定牌
local function test_confirm_card()
    local testcases = {
        {handcards = {0x28,0x29,0x2A, 0x47,0x48,0x49, 0x1d,0x22,0x23, 0x34,0x36,0x37, 0x43}, wild = 0x1D},
        {handcards = {0x28,0x29,0x2A, 0x47,0x48,0x49, 0x1d,0x22,0x23, 0x14,0x36,0x37, 0x43}, wild = 0x1D},
        {handcards = {0x17,0x18,0x19, 0x1C,0x2C,0x4C, 0x15,0x45,0x4A, 0x1A,0x34,0x3B, 0x51}, wild = 0x4A},
        {handcards = {0x17,0x18,0x19, 0x26,0x27,0x28, 0x2A,0x44,0x45, 0x1A,0x22,0x24, 0x51}, wild = 0x3A},
        {handcards = {0x1C,0x1D,0x1E, 0x46,0x47,0x52, 0x12,0x13,0x51, 0x17,0x23,0x25, 0x42}, wild = 0x3A},
    }

    for _, testcase in ipairs(testcases) do
        table.shuffle(testcase.handcards)
        local groups, types = robot.confirmCards(testcase.handcards, testcase.wild)
        print(table.concat(types, ","), "-->")
        for _, group in ipairs(groups) do
            print(formatCards(group))
        end
        --print("discard", robot.checkDiscardCard(testcase.handcards, testcase.wild))
        print("------------------------------------")
    end
end

--test_confirm_card()